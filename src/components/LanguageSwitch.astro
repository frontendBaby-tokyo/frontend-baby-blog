---
import { getAlternatePath, type Languages } from '@/i18n/utils'
import { languages } from '@/i18n/ui'

// サーバーサイドでの基本計算（SSG最適化）
const currentLang = (Astro.params.lang as Languages) || 'ja' // デフォルト値設定
const currentPath = Astro.url.pathname

// 対象言語を決定（より安全な方法）
const targetLang: Languages = currentLang === 'ja' ? 'en' : 'ja'
const alternatePath = getAlternatePath(currentPath, currentLang, targetLang)

// サーバーサイドで表示用データを準備
const targetLanguageName = languages[targetLang]
const targetFlag = targetLang === 'ja' ? '🇯🇵' : '🇺🇸'
---

<div class='language-switch' data-current-lang={currentLang} transition:persist='language-switch'>
	<a
		href={alternatePath}
		class='flex items-center gap-1 text-sm hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200 px-2 py-1 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800'
		aria-label={`Switch to ${targetLanguageName}`}
		title={`Switch to ${targetLanguageName}`}
		data-target-lang={targetLang}
	>
		<span class='flag text-lg'>{targetFlag}</span>
		<span class='lang-text font-medium'>{targetLanguageName}</span>
	</a>
</div>

<script>
	// SSG最適化: より効率的な言語スイッチ更新
	let isUpdating = false // デバウンス用フラグ

	function updateLanguageSwitch() {
		// デバウンス処理
		if (isUpdating) return
		isUpdating = true

		// 次のフレームで実行（パフォーマンス最適化）
		requestAnimationFrame(() => {
			try {
				const currentPath = window.location.pathname
				const link = document.querySelector('.language-switch a') as HTMLAnchorElement
				const languageSwitch = document.querySelector('.language-switch') as HTMLElement

				if (!link || !languageSwitch) {
					console.warn('LanguageSwitch: 必要な要素が見つかりません')
					return
				}

				// より正確な言語検出
				const currentLang = detectCurrentLanguage(currentPath)
				const targetLang = currentLang === 'ja' ? 'en' : 'ja'

				// パス変換（より堅牢な実装）
				const newPath = generateAlternatePath(currentPath, currentLang, targetLang)

				// DOM更新（バッチ処理で効率化）
				updateDOMElements(link, languageSwitch, currentLang, targetLang, newPath)
			} catch (error) {
				console.error('LanguageSwitch更新エラー:', error)
			} finally {
				isUpdating = false
			}
		})
	}

	// 言語検出ロジック（エッジケース対応）
	function detectCurrentLanguage(path: string): 'ja' | 'en' {
		if (path.includes('/ja/') || path.endsWith('/ja')) return 'ja'
		if (path.includes('/en/') || path.endsWith('/en')) return 'en'

		// デフォルトは日本語（SSGの設定に合わせる）
		return 'ja'
	}

	// パス生成ロジック（より堅牢）
	function generateAlternatePath(currentPath: string, fromLang: string, toLang: string): string {
		// ベースURL考慮
		const basePath = currentPath.replace(/\/(ja|en)(\/|$)/, `/${toLang}/`)

		// 末尾スラッシュの正規化
		if (basePath.endsWith('/') && basePath !== '/') {
			return basePath
		}

		return basePath.endsWith('/') ? basePath : basePath + '/'
	}

	// DOM更新処理（バッチ処理で効率化）
	function updateDOMElements(
		link: HTMLAnchorElement,
		container: HTMLElement,
		currentLang: string,
		targetLang: string,
		newPath: string
	) {
		const targetLanguageName = targetLang === 'ja' ? '日本語' : 'English'
		const targetFlag = targetLang === 'ja' ? '🇯🇵' : '🇺🇸'

		// バッチDOM更新
		link.href = newPath
		link.setAttribute('aria-label', `Switch to ${targetLanguageName}`)
		link.setAttribute('title', `Switch to ${targetLanguageName}`)
		link.setAttribute('data-target-lang', targetLang)
		container.setAttribute('data-current-lang', currentLang)

		// 子要素更新
		const flagElement = link.querySelector('.flag')
		const textElement = link.querySelector('.lang-text')

		if (flagElement) flagElement.textContent = targetFlag
		if (textElement) textElement.textContent = targetLanguageName
	}

	// イベントリスナー（SSG最適化）
	document.addEventListener('DOMContentLoaded', updateLanguageSwitch)

	// Astro View Transitions対応
	document.addEventListener('astro:page-load', updateLanguageSwitch)
	document.addEventListener('astro:after-swap', updateLanguageSwitch)

	// 履歴変更対応（ブラウザの戻る/進む）
	window.addEventListener('popstate', updateLanguageSwitch)
</script>

<style>
	.language-switch a {
		@apply select-none;
	}

	.language-switch a:hover {
		@apply scale-105;
		transform-origin: center;
	}
</style>
